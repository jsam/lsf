# Generated by Django 4.2 on 2025-07-25 08:42

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "soxestimeApplicationID",
                    models.CharField(max_length=255, unique=True),
                ),
                (
                    "soxesPlanningProjectID",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("jiraKey", models.CharField(blank=True, max_length=255, null=True)),
                ("Name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "applications",
            },
        ),
        migrations.CreateModel(
            name="BillingProject",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("project_name", models.CharField(max_length=255)),
                ("soxestime_ID", models.CharField(max_length=255)),
                (
                    "external_ticketing",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "external_repo",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "sales_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=18, null=True
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=18, null=True
                    ),
                ),
                (
                    "employees_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=18, null=True
                    ),
                ),
                (
                    "additional_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=18, null=True
                    ),
                ),
                ("is_external", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="billing_projects",
                        to="core.application",
                    ),
                ),
                (
                    "soxestime_application_ID",
                    models.ForeignKey(
                        db_column="soxestime_application_ID",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.application",
                        to_field="soxestimeApplicationID",
                    ),
                ),
            ],
            options={
                "db_table": "BILLING_PROJECT",
            },
        ),
        migrations.CreateModel(
            name="BitbucketProject",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("workspace", models.CharField(max_length=255)),
                ("project_key", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_private", models.BooleanField(default=True)),
                ("has_publicly_visible_repos", models.BooleanField(default=False)),
                ("created_on", models.DateTimeField(blank=True, null=True)),
                ("updated_on", models.DateTimeField(blank=True, null=True)),
                ("uuid", models.CharField(blank=True, max_length=255, null=True)),
                ("links", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "BITBUCKET_PROJECT",
            },
        ),
        migrations.CreateModel(
            name="BitbucketRepository",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("workspace", models.CharField(max_length=255)),
                ("repo_slug", models.CharField(max_length=255)),
                ("name", models.CharField(max_length=255)),
                ("full_name", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_private", models.BooleanField(default=True)),
                (
                    "fork_policy",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("website", models.CharField(blank=True, max_length=255, null=True)),
                ("language", models.CharField(blank=True, max_length=255, null=True)),
                ("has_issues", models.BooleanField(default=False)),
                ("has_wiki", models.BooleanField(default=False)),
                ("scm", models.CharField(blank=True, max_length=255, null=True)),
                ("size", models.IntegerField(blank=True, null=True)),
                ("created_on", models.DateTimeField(blank=True, null=True)),
                ("updated_on", models.DateTimeField(blank=True, null=True)),
                ("owner", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "parent_slug",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("uuid", models.CharField(blank=True, max_length=255, null=True)),
                ("links", models.TextField(blank=True, null=True)),
                (
                    "main_branch",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        db_column="project_uid",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="repositories",
                        to="core.bitbucketproject",
                    ),
                ),
            ],
            options={
                "db_table": "BITBUCKET_REPOSITORY",
            },
        ),
        migrations.CreateModel(
            name="Commit",
            fields=[
                (
                    "hash",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                ("repo_uuid", models.CharField(max_length=36)),
                ("repo_slug", models.CharField(blank=True, max_length=255, null=True)),
                ("workspace", models.CharField(blank=True, max_length=255, null=True)),
                ("author_raw", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "author_account_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "author_display_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "author_nickname",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("author_type", models.CharField(blank=True, max_length=50, null=True)),
                ("message", models.TextField(blank=True, null=True)),
                ("summary", models.CharField(blank=True, max_length=255, null=True)),
                ("date", models.DateTimeField()),
                ("parents_count", models.IntegerField(default=0)),
                ("parent_hashes", models.JSONField(blank=True, null=True)),
                ("additions", models.IntegerField(default=0)),
                ("deletions", models.IntegerField(default=0)),
                ("files_changed", models.IntegerField(default=0)),
                ("branch", models.CharField(blank=True, max_length=255, null=True)),
                ("tags", models.JSONField(blank=True, null=True)),
                ("html_url", models.CharField(blank=True, max_length=255, null=True)),
                ("rendered_message", models.TextField(blank=True, null=True)),
                (
                    "rendered_message_type",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("is_approved", models.BooleanField(default=False)),
                ("approval_count", models.IntegerField(default=0)),
                ("links", models.JSONField(blank=True, null=True)),
                ("properties", models.JSONField(blank=True, null=True)),
                ("fetched_at", models.DateTimeField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "COMMIT",
            },
        ),
        migrations.CreateModel(
            name="Employee",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("surname", models.CharField(max_length=255)),
                (
                    "organisation",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "email",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "atlassian_user_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "soxestime_user_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "soxesplanning_user_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "EMPLOYEE",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("team_name", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "TEAM",
            },
        ),
        migrations.CreateModel(
            name="TimeBooking",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("booking_date", models.DateField()),
                ("time_booked", models.DecimalField(decimal_places=2, max_digits=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "billing_project",
                    models.ForeignKey(
                        db_column="billing_project_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.billingproject",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        db_column="employee_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.employee",
                    ),
                ),
            ],
            options={
                "db_table": "TIME_BOOKING",
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ticket_ID", models.CharField(max_length=255)),
                ("Jira_key", models.CharField(blank=True, max_length=255, null=True)),
                ("time_logged", models.DecimalField(decimal_places=2, max_digits=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        db_column="application_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.application",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        db_column="employee_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.employee",
                    ),
                ),
            ],
            options={
                "db_table": "TICKET",
            },
        ),
        migrations.CreateModel(
            name="PullRequest",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("repository_ID", models.CharField(max_length=255)),
                ("LOC_changed", models.IntegerField(blank=True, null=True)),
                ("start_time", models.DateTimeField()),
                ("active_time", models.DateTimeField()),
                ("merged_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "repository",
                    models.ForeignKey(
                        db_column="repository_uid",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pull_requests",
                        to="core.bitbucketrepository",
                    ),
                ),
            ],
            options={
                "db_table": "PR",
            },
        ),
        migrations.CreateModel(
            name="Planning",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("planned_hours", models.DecimalField(decimal_places=2, max_digits=10)),
                ("calendar_week", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "application",
                    models.ForeignKey(
                        db_column="application_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.application",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        db_column="employee_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.employee",
                    ),
                ),
                (
                    "team",
                    models.ForeignKey(
                        db_column="team_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.team",
                    ),
                ),
            ],
            options={
                "db_table": "PLANNING",
            },
        ),
        migrations.CreateModel(
            name="JiraTimeLog",
            fields=[
                (
                    "uid",
                    models.CharField(
                        default=uuid.uuid4,
                        editable=False,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("booking_date", models.DateField()),
                ("time_booked", models.DecimalField(decimal_places=2, max_digits=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "employee",
                    models.ForeignKey(
                        db_column="employee_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.employee",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        db_column="ticket_ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.ticket",
                    ),
                ),
            ],
            options={
                "db_table": "jira_time_log",
            },
        ),
        migrations.AddField(
            model_name="employee",
            name="team",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="employees",
                to="core.team",
            ),
        ),
        migrations.CreateModel(
            name="DiffStat",
            fields=[
                (
                    "uid",
                    models.CharField(max_length=36, primary_key=True, serialize=False),
                ),
                ("file_path", models.CharField(max_length=255)),
                ("old_path", models.CharField(blank=True, max_length=255, null=True)),
                ("status", models.CharField(blank=True, max_length=20, null=True)),
                ("binary", models.BooleanField(default=False)),
                ("lines_added", models.IntegerField(default=0)),
                ("lines_removed", models.IntegerField(default=0)),
                ("is_renamed", models.BooleanField(default=False)),
                ("is_copied", models.BooleanField(default=False)),
                ("similarity_percent", models.IntegerField(blank=True, null=True)),
                ("type", models.CharField(default="diffstat", max_length=50)),
                ("extension", models.CharField(blank=True, max_length=50, null=True)),
                ("mime_type", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "source_node_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "target_node_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("links", models.JSONField(blank=True, null=True)),
                ("properties", models.JSONField(blank=True, null=True)),
                ("fetched_at", models.DateTimeField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "commit",
                    models.ForeignKey(
                        db_column="commit_hash",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.commit",
                    ),
                ),
            ],
            options={
                "db_table": "DIFFSTAT",
            },
        ),
        migrations.AddField(
            model_name="commit",
            name="author",
            field=models.ForeignKey(
                db_column="author_uuid",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.employee",
            ),
        ),
        migrations.AddField(
            model_name="commit",
            name="pr",
            field=models.ForeignKey(
                db_column="pr_uuid",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.pullrequest",
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="bitbucketProject",
            field=models.ForeignKey(
                db_column="bitbucketProject",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="core.bitbucketproject",
            ),
        ),
        migrations.AddIndex(
            model_name="timebooking",
            index=models.Index(fields=["employee"], name="idx_tb_employee_id"),
        ),
        migrations.AddIndex(
            model_name="timebooking",
            index=models.Index(
                fields=["billing_project"], name="idx_tb_bill_project_id"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(fields=["application"], name="idx_ticket_project"),
        ),
        migrations.AddIndex(
            model_name="pullrequest",
            index=models.Index(fields=["repository_ID"], name="idx_pr_repo"),
        ),
        migrations.AddIndex(
            model_name="pullrequest",
            index=models.Index(fields=["repository"], name="idx_pr_repo_uid"),
        ),
        migrations.AddIndex(
            model_name="jiratimelog",
            index=models.Index(fields=["employee"], name="idx_jiratimelog_employee_id"),
        ),
        migrations.AddIndex(
            model_name="jiratimelog",
            index=models.Index(fields=["ticket"], name="idx_jiratimelog_ticket_id"),
        ),
        migrations.AddIndex(
            model_name="diffstat",
            index=models.Index(fields=["commit"], name="idx_diffstat_commit_hash"),
        ),
        migrations.AddIndex(
            model_name="diffstat",
            index=models.Index(fields=["file_path"], name="idx_diffstat_file_path"),
        ),
        migrations.AddIndex(
            model_name="diffstat",
            index=models.Index(fields=["status"], name="idx_diffstat_status"),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(fields=["pr"], name="idx_commit_pr"),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(fields=["author"], name="idx_commit_author"),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(fields=["repo_uuid"], name="idx_commit_repo"),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(fields=["date"], name="idx_commit_date"),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(fields=["branch"], name="idx_commit_branch"),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(fields=["author_raw"], name="idx_commit_author_raw"),
        ),
    ]
