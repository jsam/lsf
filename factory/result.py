"""
Result types for factory execution.

Defines data structures for agent results, factory outcomes, and compliance violations.
"""

from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Literal


@dataclass
class ComplianceViolation:
    """Represents a constitutional compliance violation."""

    principle: str  # e.g., "Minimalism", "Context Efficiency"
    severity: Literal["warning", "error", "critical"]
    location: str  # File path or phase name
    description: str  # What's wrong
    suggestion: str  # How to fix it


@dataclass
class AgentResult:
    """Result from executing a single agent/phase."""

    output_artifacts: dict[str, Path] = field(default_factory=dict)
    """Files generated by this phase (e.g., {'requirements.md': Path('specs/requirements.md')})"""

    decision_log: list[dict[str, Any]] = field(default_factory=list)
    """Log of decisions made during execution"""

    metadata: dict[str, Any] = field(default_factory=dict)
    """Additional phase-specific data"""


@dataclass
class DiscriminationResult:
    """Result from a discriminator quality gate."""

    passed: bool
    """Whether discrimination passed (no critical/error violations)"""

    violations: list[ComplianceViolation] = field(default_factory=list)
    """All violations found (warnings, errors, critical)"""

    @property
    def blocking_violations(self) -> list[ComplianceViolation]:
        """Violations that block progress (errors and critical)."""
        return [v for v in self.violations if v.severity in ["error", "critical"]]


@dataclass
class FactoryResult:
    """Final result from complete factory run."""

    success: bool
    """Whether factory completed successfully"""

    blocked_phase: str | None = None
    """Phase where factory was blocked (if failed)"""

    violations: list[ComplianceViolation] = field(default_factory=list)
    """Violations that caused blocking (if any)"""

    artifacts: dict[str, Path] = field(default_factory=dict)
    """All artifacts generated during run"""

    decision_log: list[dict[str, Any]] = field(default_factory=list)
    """Complete decision log from all phases"""

    message: str = ""
    """Human-readable result message"""

    @classmethod
    def blocked(cls, phase: str, violations: list[ComplianceViolation]) -> "FactoryResult":
        """Create a blocked result."""
        return cls(
            success=False,
            blocked_phase=phase,
            violations=violations,
            message=f"Factory blocked at phase: {phase}"
        )

    @classmethod
    def failed(cls, phase: str, reason: str, **kwargs) -> "FactoryResult":
        """Create a failed result."""
        return cls(
            success=False,
            blocked_phase=phase,
            message=f"Factory failed at {phase}: {reason}",
            **kwargs
        )

    @classmethod
    def incomplete(cls, reason: str, **kwargs) -> "FactoryResult":
        """Create an incomplete result."""
        return cls(
            success=False,
            message=f"Factory incomplete: {reason}",
            **kwargs
        )

    @classmethod
    def succeeded(cls, artifacts: dict[str, Path], decision_log: list[dict]) -> "FactoryResult":
        """Create a success result."""
        return cls(
            success=True,
            artifacts=artifacts,
            decision_log=decision_log,
            message="Factory run completed successfully"
        )
